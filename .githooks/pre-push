#!/usr/bin/env bash
# SentinentX Pre-Push Guard
# Implements quality gates before allowing push to remote

set -euo pipefail
IFS=$'\n\t'

# Configuration
readonly SCRIPT_VERSION="1.0.0"
readonly PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'
readonly NC='\033[0m'

# Quality gate configuration
readonly ENABLE_TODO_SWEEPER=true
readonly ENABLE_LINT_CHECK=true
readonly ENABLE_TYPE_CHECK=true
readonly ENABLE_TESTS=true

# Logging function
log() {
    local level="$1"
    local message="$2"
    
    case "$level" in
        "INFO") echo -e "${GREEN}[INFO]${NC} $message" ;;
        "WARN") echo -e "${YELLOW}[WARN]${NC} $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $message" ;;
        "SUCCESS") echo -e "${CYAN}[SUCCESS]${NC} $message" ;;
        "STEP") echo -e "${BLUE}[STEP]${NC} $message" ;;
    esac
}

# Error handler
handle_error() {
    local exit_code=$1
    local line_number=$2
    log "ERROR" "Pre-push guard failed at line $line_number with exit code $exit_code"
    echo ""
    echo -e "${RED}${BOLD}üö´ PUSH REJECTED${NC}"
    echo -e "${RED}Quality gates failed. Please fix the issues and try again.${NC}"
    echo ""
    exit $exit_code
}

trap 'handle_error $? $LINENO' ERR

# Header
print_header() {
    echo ""
    echo -e "${BOLD}${BLUE}üõ°Ô∏è SentinentX Pre-Push Guard v$SCRIPT_VERSION${NC}"
    echo -e "${BLUE}============================================${NC}"
    echo ""
}

# Check if we're in a Git repository
check_git_repo() {
    if ! git rev-parse --git-dir &>/dev/null; then
        log "ERROR" "Not in a Git repository"
        exit 1
    fi
}

# Run TODO sweeper
run_todo_sweeper() {
    if [[ "$ENABLE_TODO_SWEEPER" != "true" ]]; then
        log "INFO" "TODO sweeper disabled, skipping"
        return 0
    fi
    
    log "STEP" "Running TODO/FIXME/HACK sweeper..."
    
    cd "$PROJECT_ROOT"
    
    if [[ -f "scripts/todo_sweeper.py" ]]; then
        if python3 scripts/todo_sweeper.py --fail-on-violations; then
            log "SUCCESS" "TODO sweeper passed (0 violations)"
        else
            log "ERROR" "TODO sweeper failed - violations found"
            echo ""
            echo -e "${RED}‚ùå TODO/FIXME/HACK Violations Found${NC}"
            echo ""
            echo -e "${YELLOW}Required format:${NC}"
            echo "// ALLOWTODO: ISSUE-123 2025-08-27 Description of what needs to be done"
            echo ""
            return 1
        fi
    else
        log "WARN" "TODO sweeper not found: scripts/todo_sweeper.py"
    fi
}

# Check code style with Laravel Pint
run_lint_check() {
    if [[ "$ENABLE_LINT_CHECK" != "true" ]]; then
        log "INFO" "Lint check disabled, skipping"
        return 0
    fi
    
    log "STEP" "Running code style check..."
    
    cd "$PROJECT_ROOT"
    
    if [[ -f "vendor/bin/pint" ]]; then
        if vendor/bin/pint --test; then
            log "SUCCESS" "Code style check passed"
        else
            log "ERROR" "Code style violations found"
            echo ""
            echo -e "${RED}‚ùå Code Style Violations${NC}"
            echo ""
            echo "Run the following to fix:"
            echo -e "${CYAN}vendor/bin/pint${NC}"
            echo ""
            return 1
        fi
    else
        log "WARN" "Laravel Pint not found, skipping style check"
    fi
}

# Run static analysis with PHPStan
run_type_check() {
    if [[ "$ENABLE_TYPE_CHECK" != "true" ]]; then
        log "INFO" "Type check disabled, skipping"
        return 0
    fi
    
    log "STEP" "Running static analysis..."
    
    cd "$PROJECT_ROOT"
    
    if [[ -f "vendor/bin/phpstan" ]]; then
        # Run PHPStan and capture error count
        local phpstan_output
        phpstan_output=$(vendor/bin/phpstan analyse app --no-progress --error-format=table 2>&1) || true
        
        # Extract error count
        local error_count
        error_count=$(echo "$phpstan_output" | grep -o "Found [0-9]* errors" | grep -o "[0-9]*" || echo "0")
        
        if [[ "$error_count" -eq 0 ]]; then
            log "SUCCESS" "Static analysis passed ($error_count errors, threshold: 0)"
        else
            log "ERROR" "Static analysis failed ($error_count errors, threshold: 0)"
            echo ""
            echo -e "${RED}‚ùå Too Many Static Analysis Errors${NC}"
            echo ""
            echo "Current: $error_count errors"
            echo "Threshold: 0 errors (zero tolerance)"
            echo ""
            return 1
        fi
    else
        log "WARN" "PHPStan not found, skipping static analysis"
    fi
}

# Run basic tests
run_tests() {
    if [[ "$ENABLE_TESTS" != "true" ]]; then
        log "INFO" "Tests disabled, skipping"
        return 0
    fi
    
    log "STEP" "Running test suite..."
    
    cd "$PROJECT_ROOT"
    
    if [[ -f "vendor/bin/phpunit" ]]; then
        # Run a quick smoke test instead of full suite for speed
        if vendor/bin/phpunit tests/Unit --stop-on-failure --no-coverage; then
            log "SUCCESS" "Unit tests passed"
        else
            log "ERROR" "Unit tests failed"
            echo ""
            echo -e "${RED}‚ùå Unit Tests Failed${NC}"
            echo ""
            echo "Fix failing tests before pushing."
            echo ""
            return 1
        fi
    else
        log "WARN" "PHPUnit not found, skipping tests"
    fi
}

# Main execution
main() {
    print_header
    
    # Basic checks
    check_git_repo
    
    # Run quality gates
    run_todo_sweeper
    run_lint_check
    run_type_check
    run_tests
    
    # Success
    echo ""
    echo -e "${GREEN}${BOLD}‚úÖ PUSH APPROVED${NC}"
    echo -e "${GREEN}All quality gates passed successfully!${NC}"
    echo ""
    
    log "SUCCESS" "Pre-push validation completed successfully"
}

# Execute main function
main "$@"
